// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkId String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  posts Post[]
  comments Comment[]
  likes Like[]

  followers Follows[] @relation("following") //users who follow this user
  following Follows[] @relation("followers") // users this user follows

  notifications Notification[] @relation("userNotifications") //notifications for the user receives
  notificationsCreated Notification[] @relation("notificationCreator") //notifications the user created
}

model Post{ 
  id String @id @default(cuid())
  content String?
  image String?
  authorId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes Like[]
  notifications Notification[]
}


model Comment {
  id String @id @default(cuid())
  content String?
  authorId String
  postId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]
  @@index([authorId, postId])

}

model Like {
  id String @id @default(cuid())
  userId String
  postId String
  createdAt DateTime @default(now())

  //Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId, postId]) 
  @@unique([userId, postId]) //same use cannot like post twice
}

model Follows {
  id String @id @default(cuid())
  followerId String
  followingId String
  createdAt DateTime @default(now())

  //Relations
  follower User @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId, followingId])
  @@unique([followerId, followingId])
}

model Notification {
  id String @id @default(cuid())
  type NotificationType
  creatorId String
  read Boolean @default(false)
  userId String
  postId String
  commentId String
  createdAt DateTime @default(now())

  //Relations
  user User @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, postId])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}